<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d10" for="edge" attr.name="edge_type" attr.type="string" />
  <key id="d9" for="node" attr.name="subgoal" attr.type="string" />
  <key id="d8" for="node" attr.name="intern_name" attr.type="string" />
  <key id="d7" for="node" attr.name="context" attr.type="string" />
  <key id="d6" for="node" attr.name="index" attr.type="long" />
  <key id="d5" for="node" attr.name="content" attr.type="string" />
  <key id="d4" for="node" attr.name="type" attr.type="string" />
  <key id="d3" for="node" attr.name="id" attr.type="string" />
  <key id="d2" for="node" attr.name="label" attr.type="string" />
  <key id="d1" for="graph" attr.name="problem_statement" attr.type="string" />
  <key id="d0" for="graph" attr.name="instance_id" attr.type="string" />
  <graph edgedefault="directed">
    <node id="node_0">
      <data key="d2">Init</data>
      <data key="d3">node_0</data>
      <data key="d4">initialization</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Initialized HyperAgent instance sympy__sympy-17630</data>
      <data key="d6">0</data>
      <data key="d7" />
    </node>
    <node id="node_1">
      <data key="d2">Init</data>
      <data key="d3">node_1</data>
      <data key="d4">initialization</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Initialized HyperAgent instance sympy__sympy-17630</data>
      <data key="d6">1</data>
      <data key="d7" />
    </node>
    <node id="node_2">
      <data key="d2">Init</data>
      <data key="d3">node_2</data>
      <data key="d4">initialization</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Initialized HyperAgent instance sympy__sympy-17630</data>
      <data key="d6">2</data>
      <data key="d7" />
    </node>
    <node id="node_3">
      <data key="d2">Init</data>
      <data key="d3">node_3</data>
      <data key="d4">initialization</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Initialized HyperAgent instance sympy__sympy-17630</data>
      <data key="d6">3</data>
      <data key="d7" />
    </node>
    <node id="node_4">
      <data key="d2">Tools Init</data>
      <data key="d3">node_4</data>
      <data key="d4">tool_init</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Initialized tools</data>
      <data key="d6">4</data>
      <data key="d7" />
    </node>
    <node id="node_5">
      <data key="d2">Planner</data>
      <data key="d3">node_5</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Planner's Response: Thought: The issue arises when attempting to block-multiply a `BlockMatrix` containing `ZeroMatrix` blocks more than once. The error trace indicates that during the second multiplication, the zeros in the resulting matrix are not `ZeroMatrix` objects but `Zero` objects, which do not have the `cols` attribute. This attribute is required by the `_blockmul` method to perform the multiplication. To resolve this, we need to ensure that the zeros in the resulting matrix are always `ZeroMatrix` objects. I will first ask the Codebase Navigator to locate the relevant code sections in the `BlockMatrix` class and the `_blockmul` method.</data>
      <data key="d6">5</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_6">
      <data key="d2">Intern: Codebase Navigator</data>
      <data key="d3">node_6</data>
      <data key="d4">intern_assignment</data>
      <data key="d8">Codebase Navigator</data>
      <data key="d5">Intern Name: Codebase Navigator</data>
      <data key="d6">7</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_7">
      <data key="d2">Subgoal: Please locate the relevant code sections...</data>
      <data key="d3">node_7</data>
      <data key="d4">subgoal</data>
      <data key="d9">Please locate the relevant code sections in the `BlockMatrix` class and the `_blockmul` method in the `sympy/matrices/expressions/blockmatrix.py` file. Specifically, identify where the zeros are being handled during the block multiplication process and where the `ZeroMatrix` objects are being converted to `Zero` objects. Provide the exact line numbers and code snippets where this conversion occurs.</data>
      <data key="d5">Subgoal: Please locate the relevant code sections in the `BlockMatrix` class and the `_blockmul` method in the `sympy/matrices/expressions/blockmatrix.py` file. Specifically, identify where the zeros are being handled during the block multiplication process and where the `ZeroMatrix` objects are being converted to `Zero` objects. Provide the exact line numbers and code snippets where this conversion occurs.</data>
      <data key="d6">8</data>
      <data key="d7">intern_Codebase Navigator</data>
    </node>
    <node id="node_8">
      <data key="d2">Navigator</data>
      <data key="d3">node_8</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Navigator-Assistant's Response: Thought: To identify the root cause of the issue with block matrix multiplication involving zero matrices, I will navigate the SymPy codebase and examine the relevant code sections.</data>
      <data key="d6">9</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_9">
      <data key="d2">Navigator</data>
      <data key="d3">node_9</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Navigator-Assistant's Response: Thought: The issue seems to be related to the block matrix multiplication, so I will focus on exploring the `blockmatrix.py` file.</data>
      <data key="d6">18</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_10">
      <data key="d2">Navigator</data>
      <data key="d3">node_10</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Navigator-Assistant's Response: Thought: The key issue seems to be related to the handling of `ZeroMatrix` objects during block matrix multiplication. The code indicates that when a `BlockMatrix` contains `ZeroMatrix` objects, they are being converted to `Zero` objects, which lack the necessary attributes (like `cols`) required for the block matrix multiplication logic.</data>
      <data key="d6">27</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_11">
      <data key="d2">Navigator</data>
      <data key="d3">node_11</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Navigator-Assistant's Response: Thought: The key issue seems to be related to the handling of `ZeroMatrix` objects during block matrix multiplication. The code indicates that when a `BlockMatrix` contains `ZeroMatrix` objects, they are being converted to `Zero` objects, which lack the necessary attributes (like `cols`) required for the block matrix multiplication logic.</data>
      <data key="d6">36</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_12">
      <data key="d2">Navigator</data>
      <data key="d3">node_12</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Navigator-Assistant's Response: Thought: The root cause of the issue seems to be in the implementation of the `_blockmul` method in the `BlockMatrix` class. When the `BlockMatrix` contains `ZeroMatrix` objects, they are being converted to `Zero` objects, which lack the necessary attributes (like `cols`) required for the block matrix multiplication logic.</data>
      <data key="d6">45</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_13">
      <data key="d2">Action</data>
      <data key="d3">node_13</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
# Look at the implementation of the _blockmul method in the BlockMatrix class
result = open_file._run(relative_file_path="sympy/matrices/expressions/blockmatrix.py", keywords=["_blockmul"])
print(result)
```
Final Answer:
The issue is caused by the way `ZeroMatrix` objects are handled in the `_blockmul` method of the `BlockMatrix` class in SymPy. Specifically, the issue occurs when a `BlockMatrix` containing `ZeroMatrix` objects is multiplied multiple times.
The relevant code is in the `_blockmul` method of the `BlockMatrix` class:
```python
def _blockmul(self, other):
if (isinstance(other, BlockMatrix) and
self.colblocksizes == other.rowblocksizes):
return BlockMatrix(self.blocks * other.blocks)
else:
return self * other
```
When the `BlockMatrix` contains `ZeroMatrix` objects, they are being converted to `Zero` objects, which lack the necessary attributes (like `cols`) required for the block matrix multiplication logic. This causes the exception to be raised when the `BlockMatrix` is multiplied multiple times.
To fix this issue, the SymPy developers should ensure that the `ZeroMatrix` objects are properly handled in the `_blockmul` method, and not converted to `Zero` objects, which lack the necessary attributes for the block matrix multiplication logic.</data>
      <data key="d6">45</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_14">
      <data key="d2">info_log</data>
      <data key="d3">node_14</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Navigator-&gt;Planner: The relevant code sections are located in the `BlockMatrix` class and the `_blockmul` method in the `sympy/matrices/expressions/blockmatrix.py` file.</data>
      <data key="d6">64</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_15">
      <data key="d2">Planner</data>
      <data key="d3">node_15</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Planner's Response: Thought: The issue is clearly identified in the `_blockmul` method of the `BlockMatrix` class. The `ZeroMatrix` objects are being converted to `Zero` objects during the block multiplication process, which leads to the `AttributeError` because `Zero` objects do not have the `cols` attribute. To resolve this, we need to ensure that `ZeroMatrix` objects are preserved during the multiplication process. I will now ask the Codebase Editor to modify the `_blockmul` method to handle `ZeroMatrix` objects correctly.</data>
      <data key="d6">120</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_16">
      <data key="d2">Intern: Codebase Editor</data>
      <data key="d3">node_16</data>
      <data key="d4">intern_assignment</data>
      <data key="d8">Codebase Editor</data>
      <data key="d5">Intern Name: Codebase Editor</data>
      <data key="d6">122</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_17">
      <data key="d2">Subgoal: Please modify the `_blockmul` method in ...</data>
      <data key="d3">node_17</data>
      <data key="d4">subgoal</data>
      <data key="d9">Please modify the `_blockmul` method in the `sympy/matrices/expressions/blockmatrix.py` file to handle `ZeroMatrix` objects correctly during the block multiplication process. Specifically, ensure that `ZeroMatrix` objects are not converted to `Zero` objects, and that their attributes are preserved. Here is a suggested implementation:</data>
      <data key="d5">Subgoal: Please modify the `_blockmul` method in the `sympy/matrices/expressions/blockmatrix.py` file to handle `ZeroMatrix` objects correctly during the block multiplication process. Specifically, ensure that `ZeroMatrix` objects are not converted to `Zero` objects, and that their attributes are preserved. Here is a suggested implementation:</data>
      <data key="d6">123</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_18">
      <data key="d2">info_log</data>
      <data key="d3">node_18</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Editor-Assistant's Response: Thought: To modify the `_blockmul` method in the `sympy/matrices/expressions/blockmatrix.py` file, I first need to locate the file and the specific method. Then, I'll use the editor to make the necessary changes.</data>
      <data key="d6">142</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_19">
      <data key="d2">Action</data>
      <data key="d3">node_19</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
result = open_file_gen._run(relative_file_path="sympy/matrices/expressions/blockmatrix.py", keywords=["class BlockMatrix", "def _blockmul"])
print(result)
```
Observation</data>
      <data key="d6">145</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_20">
      <data key="d2">info_log</data>
      <data key="d3">node_20</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Editor-Assistant's Response: Thought: The `_blockmul` method in the `BlockMatrix` class needs to be modified to handle `ZeroMatrix` objects correctly during the block multiplication process. Specifically, we need to ensure that `ZeroMatrix` objects are not converted to `Zero` objects, and that their attributes are preserved. The suggested implementation provided in the query should be applied to the `_blockmul` method.</data>
      <data key="d6">151</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_21">
      <data key="d2">Action</data>
      <data key="d3">node_21</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
patch = '''
def _blockmul(self, other):
if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:
# Perform block multiplication
result_blocks = [[None for _ in range(other.blockshape[1])] for _ in range(self.blockshape[0])]
for i in range(self.blockshape[0]):
for j in range(other.blockshape[1]):
result_blocks[i][j] = sum(self.blocks[i][k] * other.blocks[k][j] for k in range(self.blockshape[1]))
# Ensure that ZeroMatrix objects are preserved
if isinstance(result_blocks[i][j], Zero):
result_blocks[i][j] = ZeroMatrix(result_blocks[i][j].rows, result_blocks[i][j].cols)
return BlockMatrix(result_blocks)
else:
return self * other
'''
result = editor._run(relative_file_path="sympy/matrices/expressions/blockmatrix.py", start_line=164, end_line=169, patch=patch)
print(result)
```
Observation</data>
      <data key="d6">154</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_22">
      <data key="d2">info_log</data>
      <data key="d3">node_22</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Editor-Assistant's Response: Thought: The error message indicates that the name 'Zero' is not recognized or defined. This means that the `Zero` class is not imported in the `blockmatrix.py` file. We need to ensure that the `Zero` class is imported from the appropriate module before applying the patch.</data>
      <data key="d6">175</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_23">
      <data key="d2">Action</data>
      <data key="d3">node_23</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
result = open_file_gen._run(relative_file_path="sympy/matrices/expressions/blockmatrix.py", keywords=["from sympy import"])
print(result)
```
Observation</data>
      <data key="d6">178</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_24">
      <data key="d2">info_log</data>
      <data key="d3">node_24</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Editor-Assistant's Response: Thought: The `Zero` class is not imported in the `blockmatrix.py` file. We need to import the `Zero` class from the `sympy.core.numbers` module before applying the patch.</data>
      <data key="d6">184</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_25">
      <data key="d2">Action</data>
      <data key="d3">node_25</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
patch = '''
from sympy.core.numbers import Zero
def _blockmul(self, other):
if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:
# Perform block multiplication
result_blocks = [[None for _ in range(other.blockshape[1])] for _ in range(self.blockshape[0])]
for i in range(self.blockshape[0]):
for j in range(other.blockshape[1]):
result_blocks[i][j] = sum(self.blocks[i][k] * other.blocks[k][j] for k in range(self.blockshape[1]))
# Ensure that ZeroMatrix objects are preserved
if isinstance(result_blocks[i][j], Zero):
result_blocks[i][j] = ZeroMatrix(result_blocks[i][j].rows, result_blocks[i][j].cols)
return BlockMatrix(result_blocks)
else:
return self * other
'''
result = editor._run(relative_file_path="sympy/matrices/expressions/blockmatrix.py", start_line=164, end_line=169, patch=patch)
print(result)
```
Observation</data>
      <data key="d6">188</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_26">
      <data key="d2">info_log</data>
      <data key="d3">node_26</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Inner-Editor-Assistant's Response: Thought: The patch has been successfully applied to the `_blockmul` method in the `BlockMatrix` class. The `Zero` class has been imported from the `sympy.core.numbers` module, and the `_blockmul` method has been modified to handle `ZeroMatrix` objects correctly during the block multiplication process. This should resolve the issue of `ZeroMatrix` objects being converted to `Zero` objects and thus avoiding the `AttributeError`.</data>
      <data key="d6">210</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_27">
      <data key="d2">info_log</data>
      <data key="d3">node_27</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Editor-&gt;Planner: Thought: The patch has been successfully applied to the `_blockmul` method in the `BlockMatrix` class. The `Zero` class has been imported from the `sympy.core.numbers` module, and the `_blockmul` method has been modified to handle `ZeroMatrix` objects correctly during the block multiplication process. This should resolve the issue of `ZeroMatrix` objects being converted to `Zero` objects and thus avoiding the `AttributeError`.</data>
      <data key="d6">213</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_28">
      <data key="d2">Planner</data>
      <data key="d3">node_28</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_sympy__sympy-17630 - INFO - Planner's Response: ```xml</data>
      <data key="d6">216</data>
      <data key="d7">planner</data>
    </node>
    <edge source="node_0" target="node_1">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_1" target="node_2">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_2" target="node_3">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_3" target="node_4">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_4" target="node_5">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_5" target="node_6">
      <data key="d10">delegation</data>
    </edge>
    <edge source="node_6" target="node_7">
      <data key="d10">task_assignment</data>
    </edge>
    <edge source="node_7" target="node_8">
      <data key="d10">execution</data>
    </edge>
    <edge source="node_8" target="node_9">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_9" target="node_10">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_10" target="node_11">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_11" target="node_12">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_12" target="node_13">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_13" target="node_14">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_14" target="node_15">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_15" target="node_16">
      <data key="d10">delegation</data>
    </edge>
    <edge source="node_16" target="node_17">
      <data key="d10">task_assignment</data>
    </edge>
    <edge source="node_17" target="node_18">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_18" target="node_19">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_19" target="node_20">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_20" target="node_21">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_21" target="node_22">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_22" target="node_23">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_23" target="node_24">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_24" target="node_25">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_25" target="node_26">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_26" target="node_27">
      <data key="d10">sequential</data>
    </edge>
    <edge source="node_27" target="node_28">
      <data key="d10">sequential</data>
    </edge>
    <data key="d0">sympy__sympy-17630</data>
    <data key="d1">["Exception when multiplying BlockMatrix containing ZeroMatrix blocks", "When a block matrix with zero blocks is defined\r", "\r", "```\r", "&gt;&gt;&gt; from sympy import *\r", "&gt;&gt;&gt; a = MatrixSymbol(\"a\", 2, 2)\r", "&gt;&gt;&gt; z = ZeroMatrix(2, 2)\r", "&gt;&gt;&gt; b = BlockMatrix([[a, z], [z, z]])\r", "```\r", "\r", "then block-multiplying it once seems to work fine:\r", "\r", "```\r", "&gt;&gt;&gt; block_collapse(b * b)\r", "Matrix([\r", "[a**2, 0],\r", "[0, 0]])\r", "&gt;&gt;&gt; b._blockmul(b)\r", "Matrix([\r", "[a**2, 0],\r", "[0, 0]])\r", "```\r", "\r", "but block-multiplying twice throws an exception:\r", "\r", "```\r", "&gt;&gt;&gt; block_collapse(b * b * b)\r", "Traceback (most recent call last):\r", "  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 297, in block_collapse\r", "    result = rule(expr)\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 11, in exhaustive_rl\r", "    new, old = rule(expr), expr\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 44, in chain_rl\r", "    expr = rule(expr)\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 11, in exhaustive_rl\r", "    new, old = rule(expr), expr\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 33, in conditioned_rl\r", "    return rule(expr)\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 95, in switch_rl\r", "    return rl(expr)\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 361, in bc_matmul\r", "    matrices[i] = A._blockmul(B)\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 91, in _blockmul\r", "    self.colblocksizes == other.rowblocksizes):\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in colblocksizes\r", "    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in &lt;listcomp&gt;\r", "    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r", "AttributeError: 'Zero' object has no attribute 'cols'\r", "&gt;&gt;&gt; b._blockmul(b)._blockmul(b)\r", "Traceback (most recent call last):\r", "  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 91, in _blockmul\r", "    self.colblocksizes == other.rowblocksizes):\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in colblocksizes\r", "    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r", "  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in &lt;listcomp&gt;\r", "    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r", "AttributeError: 'Zero' object has no attribute 'cols'\r", "```\r", "\r", "This seems to be caused by the fact that the zeros in `b._blockmul(b)` are not `ZeroMatrix` but `Zero`:\r", "\r", "```\r", "&gt;&gt;&gt; type(b._blockmul(b).blocks[0, 1])\r", "&lt;class 'sympy.core.numbers.Zero'&gt;\r", "```\r", "\r", "However, I don't understand SymPy internals well enough to find out why this happens. I use Python 3.7.4 and sympy 1.4 (installed with pip).", ""]</data>
  </graph>
</graphml>
