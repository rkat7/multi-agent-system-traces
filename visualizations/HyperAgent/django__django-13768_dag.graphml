<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d11" for="edge" attr.name="edge_type" attr.type="string" />
  <key id="d10" for="node" attr.name="thought" attr.type="string" />
  <key id="d9" for="node" attr.name="subgoal" attr.type="string" />
  <key id="d8" for="node" attr.name="intern_name" attr.type="string" />
  <key id="d7" for="node" attr.name="context" attr.type="string" />
  <key id="d6" for="node" attr.name="index" attr.type="long" />
  <key id="d5" for="node" attr.name="content" attr.type="string" />
  <key id="d4" for="node" attr.name="type" attr.type="string" />
  <key id="d3" for="node" attr.name="id" attr.type="string" />
  <key id="d2" for="node" attr.name="label" attr.type="string" />
  <key id="d1" for="graph" attr.name="problem_statement" attr.type="string" />
  <key id="d0" for="graph" attr.name="instance_id" attr.type="string" />
  <graph edgedefault="directed">
    <node id="node_0">
      <data key="d2">Init</data>
      <data key="d3">node_0</data>
      <data key="d4">initialization</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Initialized HyperAgent instance django__django-13768</data>
      <data key="d6">0</data>
      <data key="d7" />
    </node>
    <node id="node_1">
      <data key="d2">Init</data>
      <data key="d3">node_1</data>
      <data key="d4">initialization</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Initialized HyperAgent instance django__django-13768</data>
      <data key="d6">1</data>
      <data key="d7" />
    </node>
    <node id="node_2">
      <data key="d2">Tools Init</data>
      <data key="d3">node_2</data>
      <data key="d4">tool_init</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Initialized tools</data>
      <data key="d6">2</data>
      <data key="d7" />
    </node>
    <node id="node_3">
      <data key="d2">Planner</data>
      <data key="d3">node_3</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Planner's Response: Thought: To address this GitHub issue, we need to understand the current implementation of `Signal.send_robust()` and then modify it to include logging for exceptions raised in receivers. Let's start by examining the relevant code in Django's codebase.</data>
      <data key="d6">3</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_4">
      <data key="d2">Intern: Codebase Navigator</data>
      <data key="d3">node_4</data>
      <data key="d4">intern_assignment</data>
      <data key="d8">Codebase Navigator</data>
      <data key="d5">Intern Name: Codebase Navigator</data>
      <data key="d6">5</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_5">
      <data key="d2">Subgoal: Please locate the `Signal` class and the...</data>
      <data key="d3">node_5</data>
      <data key="d4">subgoal</data>
      <data key="d9">Please locate the `Signal` class and the `send_robust()` method within Django's codebase. It's likely to be in a file related to signals or dispatch.</data>
      <data key="d5">Subgoal: Please locate the `Signal` class and the `send_robust()` method within Django's codebase. It's likely to be in a file related to signals or dispatch.</data>
      <data key="d6">6</data>
      <data key="d7">intern_Codebase Navigator</data>
    </node>
    <node id="node_6">
      <data key="d2">Navigator</data>
      <data key="d3">node_6</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Navigator-Assistant's Response: Okay, let's try to locate the `Signal` class and the `send_robust()` method in Django's codebase.</data>
      <data key="d6">7</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_7">
      <data key="d2">Think: To find the relevant file and code, I wi...</data>
      <data key="d3">node_7</data>
      <data key="d4">thought</data>
      <data key="d10">To find the relevant file and code, I will use the provided tools to search for the `Signal` class and the `send_robust()` method.</data>
      <data key="d5">Thought: To find the relevant file and code, I will use the provided tools to search for the `Signal` class and the `send_robust()` method.</data>
      <data key="d6">9</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_8">
      <data key="d2">Navigator</data>
      <data key="d3">node_8</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Navigator-Assistant's Response: Thought: The search results show that the `Signal` class is defined in the `django.dispatch.dispatcher` module. To find the `send_robust()` method, I will search for that specifically.</data>
      <data key="d6">17</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_9">
      <data key="d2">Navigator</data>
      <data key="d3">node_9</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Navigator-Assistant's Response: Thought: The `send_robust()` method is defined in the `django.dispatch.dispatcher` module, within the `Signal` class. This method is responsible for sending a signal to all connected receivers, catching any errors that may occur.</data>
      <data key="d6">25</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_10">
      <data key="d2">Navigator</data>
      <data key="d3">node_10</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Navigator-Assistant's Response: Thought: The implementation of the `send_robust()` method in the `Signal` class shows that it sends the signal to all connected receivers, catching any exceptions that may be raised. If any receiver raises an exception, the exception instance is returned as the response for that receiver.</data>
      <data key="d6">35</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_11">
      <data key="d2">Think: To provide a solution, I will propose a ...</data>
      <data key="d3">node_11</data>
      <data key="d4">thought</data>
      <data key="d10">To provide a solution, I will propose a pull request that adds the suggested logging functionality to the `send_robust()` method.</data>
      <data key="d5">Thought: To provide a solution, I will propose a pull request that adds the suggested logging functionality to the `send_robust()` method.</data>
      <data key="d6">43</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_12">
      <data key="d2">Action</data>
      <data key="d3">node_12</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
result = open_file._run(relative_file_path="django/dispatch/dispatcher.py", keywords=["send_robust"], start_line=181, end_line=214)
print(result)
```
The method first checks if there are any registered receivers for the signal. If not, it returns an empty list.
Then, it iterates through all the live receivers and calls each one, catching any exceptions that may be raised. The responses from the receivers, along with any exceptions, are collected in a list of tuples and returned.
This behavior seems to match the description in the Github issue, where it is mentioned that the `send_robust()` method does not log exceptions raised in the receivers. The issue suggests that it would be worth adding a `logger.exception()` call in the `except` clause to log these exceptions.
Final Answer:
To resolve the issue of missing log messages for exceptions raised in receivers of `Signal.send_robust()`, I propose the following solution:
```python
import logging
def send_robust(self, sender, **named):
"""
Send signal from sender to all connected receivers catching errors.
Arguments:
sender
The sender of the signal. Can be any Python object (normally one
registered with a connect if you actually want something to
occur).
named
Named arguments which will be passed to receivers.
Return a list of tuple pairs [(receiver, response), ... ].
If any receiver raises an error (specifically any subclass of
Exception), return the error instance as the result for that receiver
and log the exception using `logger.exception()`.
"""
if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:
return []
responses = []
for receiver in self._live_receivers(sender):
try:
response = receiver(signal=self, sender=sender, **named)
except Exception as err:
logger.exception("Exception raised in Signal.send_robust() receiver: %s", receiver)
responses.append((receiver, err))
else:
responses.append((receiver, response))
return responses
```
The changes made are:
1. Imported the `logging` module to add logging functionality.
2. Added a `logger.exception()` call inside the `except` clause to log the exception raised by the receiver.
This solution will ensure that any exceptions raised in the receivers of `Signal.send_robust()` are logged, making it easier for users to identify and troubleshoot issues.</data>
      <data key="d6">46</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_13">
      <data key="d2">info_log</data>
      <data key="d3">node_13</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Navigator-&gt;Planner: The `Signal` class and the `send_robust()` method are located in the `django.dispatch.dispatcher` module.</data>
      <data key="d6">90</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_14">
      <data key="d2">Planner</data>
      <data key="d3">node_14</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Planner's Response: Thought: Thank you for providing the location and code snippets of the `Signal` class and `send_robust()` method. Now that we have this information, we can see that the `send_robust()` method is designed to catch exceptions from receivers but currently doesn't log them. To address the issue, we need to modify this method to include logging for exceptions.</data>
      <data key="d6">128</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_15">
      <data key="d2">Intern: Codebase Navigator</data>
      <data key="d3">node_15</data>
      <data key="d4">intern_assignment</data>
      <data key="d8">Codebase Navigator</data>
      <data key="d5">Intern Name: Codebase Navigator</data>
      <data key="d6">132</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_16">
      <data key="d2">Subgoal: Please provide the full implementation o...</data>
      <data key="d3">node_16</data>
      <data key="d4">subgoal</data>
      <data key="d9">Please provide the full implementation of the `send_robust()` method from the `django/dispatch/dispatcher.py` file.</data>
      <data key="d5">Subgoal: Please provide the full implementation of the `send_robust()` method from the `django/dispatch/dispatcher.py` file.</data>
      <data key="d6">133</data>
      <data key="d7">intern_Codebase Navigator</data>
    </node>
    <node id="node_17">
      <data key="d2">Navigator</data>
      <data key="d3">node_17</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Navigator-Assistant's Response: Thought: To get the full implementation of the `send_robust()` method, I will use the `open_file` tool to open the `django/dispatch/dispatcher.py` file and extract the relevant code.</data>
      <data key="d6">134</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_18">
      <data key="d2">Navigator</data>
      <data key="d3">node_18</data>
      <data key="d4">navigator_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Navigator-Assistant's Response: Thought: The `send_robust()` method is responsible for sending a signal to all connected receivers, while catching any errors that may be raised by the receivers. The key points about this method are:</data>
      <data key="d6">142</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_19">
      <data key="d2">Action</data>
      <data key="d3">node_19</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
result = open_file._run(relative_file_path="django/dispatch/dispatcher.py", keywords=["send_robust"], start_line=80, end_line=110)
print(result)
```
1. It takes a `sender` argument, which is the object sending the signal, and any number of named arguments to pass to the receivers.
2. It checks if there are any receivers connected to the signal. If not, it returns an empty list.
3. It iterates through all the live receivers and calls each one with the signal, sender, and named arguments.
4. If any receiver raises an exception, the exception instance is added to the `responses` list instead of the receiver's return value.
5. Finally, it returns a list of tuples, where each tuple contains the receiver and either the receiver's response or the exception instance if an error occurred.
This method ensures that if any receiver raises an exception, the other receivers are still called, and the exceptions are captured and returned in the response, rather than causing the entire signal dispatch to fail.
Final Answer: The `send_robust()` method in the `django.dispatch.dispatcher.Signal` class is responsible for dispatching a signal to all connected receivers, while catching any exceptions raised by the receivers. It returns a list of tuples, where each tuple contains the receiver and either the receiver's response or an exception instance if an error occurred.</data>
      <data key="d6">141</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_20">
      <data key="d2">info_log</data>
      <data key="d3">node_20</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Navigator-&gt;Planner: The full implementation of the `send_robust()` method from the `django/dispatch/dispatcher.py` file is as follows:</data>
      <data key="d6">153</data>
      <data key="d7">navigator</data>
    </node>
    <node id="node_21">
      <data key="d2">Planner</data>
      <data key="d3">node_21</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Planner's Response: Thought: Thank you for providing the full implementation of the `send_robust()` method. Now that we can see the entire method, it's clear where we need to add the logging functionality. The method already catches exceptions, but it doesn't log them. We need to modify the `except` block to include logging before appending the error to the responses.</data>
      <data key="d6">192</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_22">
      <data key="d2">Intern: Codebase Editor</data>
      <data key="d3">node_22</data>
      <data key="d4">intern_assignment</data>
      <data key="d8">Codebase Editor</data>
      <data key="d5">Intern Name: Codebase Editor</data>
      <data key="d6">202</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_23">
      <data key="d2">Subgoal: Please make the following changes to the...</data>
      <data key="d3">node_23</data>
      <data key="d4">subgoal</data>
      <data key="d9">Please make the following changes to the `django/dispatch/dispatcher.py` file:</data>
      <data key="d5">Subgoal: Please make the following changes to the `django/dispatch/dispatcher.py` file:</data>
      <data key="d6">203</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_24">
      <data key="d2">info_log</data>
      <data key="d3">node_24</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Editor-Assistant's Response: Thought: To make the requested changes, I need to modify the `django/dispatch/dispatcher.py` file. I'll start by adding the import statement and logger creation at the top of the file, and then update the `send_robust()` method.</data>
      <data key="d6">227</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_25">
      <data key="d2">info_log</data>
      <data key="d3">node_25</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Editor-Assistant's Response: Thought: The import statement and logger creation have been successfully added to the file. Now, I need to update the `send_robust()` method with the requested changes.</data>
      <data key="d6">242</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_26">
      <data key="d2">Action</data>
      <data key="d3">node_26</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
# Now, let's update the send_robust() method
result = open_file_gen._run(relative_file_path="django/dispatch/dispatcher.py", keywords=["def send_robust"])
print(result)
```</data>
      <data key="d6">244</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_27">
      <data key="d2">info_log</data>
      <data key="d3">node_27</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Editor-Assistant's Response: Thought: Now that I have located the `send_robust()` method, I need to update it with the requested changes. I'll modify the `try`-`except` block to include the logging statement.</data>
      <data key="d6">250</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_28">
      <data key="d2">Action</data>
      <data key="d3">node_28</data>
      <data key="d4">action</data>
      <data key="d5">Action:
```python
patch = '''
def send_robust(self, sender, **named):
"""
Send signal from sender to all connected receivers catching errors.
Arguments:
sender
The sender of the signal. Can be any Python object (normally one
registered with a connect if you actually want something to
occur).
named
Named arguments which will be passed to receivers.
Return a list of tuple pairs [(receiver, response), ... ].
If any receiver raises an error (specifically any subclass of
Exception), return the error instance as the result for that receiver.
"""
if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:
return []
# Call each receiver with whatever arguments it can accept.
# Return a list of tuple pairs [(receiver, response), ... ].
responses = []
for receiver in self._live_receivers(sender):
try:
response = receiver(signal=self, sender=sender, **named)
except Exception as err:
logger.exception("Error calling %s in Signal.send_robust()", receiver)
responses.append((receiver, err))
else:
responses.append((receiver, response))
return responses
'''
result = editor._run(relative_file_path="django/dispatch/dispatcher.py", start_line=187, end_line=219, patch=patch)
print(result)
```</data>
      <data key="d6">258</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_29">
      <data key="d2">info_log</data>
      <data key="d3">node_29</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Editor-Assistant's Response: Thought: The changes have been successfully applied to the `send_robust()` method. The logging statement has been added to the `except` block as requested. Now, I can provide the final answer with the updated `send_robust()` method.</data>
      <data key="d6">293</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_30">
      <data key="d2">info_log</data>
      <data key="d3">node_30</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Editor-&gt;Planner: Thought: The changes have been successfully applied to the `send_robust()` method. The logging statement has been added to the `except` block as requested. Now, I can provide the final answer with the updated `send_robust()` method.</data>
      <data key="d6">340</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_31">
      <data key="d2">Planner</data>
      <data key="d3">node_31</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Planner's Response: Thought: Now that we have successfully implemented the changes to the `send_robust()` method, we have addressed the issue raised in the GitHub issue. Let's review the changes and their impact:</data>
      <data key="d6">387</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_32">
      <data key="d2">Intern: Codebase Editor</data>
      <data key="d3">node_32</data>
      <data key="d4">intern_assignment</data>
      <data key="d8">Codebase Editor</data>
      <data key="d5">Intern Name: Codebase Editor</data>
      <data key="d6">403</data>
      <data key="d7">planner</data>
    </node>
    <node id="node_33">
      <data key="d2">Subgoal: Please create a summary of the changes m...</data>
      <data key="d3">node_33</data>
      <data key="d4">subgoal</data>
      <data key="d9">Please create a summary of the changes made to resolve the GitHub issue, including:</data>
      <data key="d5">Subgoal: Please create a summary of the changes made to resolve the GitHub issue, including:</data>
      <data key="d6">404</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_34">
      <data key="d2">info_log</data>
      <data key="d3">node_34</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Inner-Editor-Assistant's Response: Thought: To create a comprehensive summary of the changes made to resolve the GitHub issue, I need to review the information we have gathered and the modifications we've made to the codebase.</data>
      <data key="d6">409</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_35">
      <data key="d2">Think: I now know the final answer...</data>
      <data key="d3">node_35</data>
      <data key="d4">thought</data>
      <data key="d10">I now know the final answer</data>
      <data key="d5">Thought: I now know the final answer</data>
      <data key="d6">411</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_36">
      <data key="d2">info_log</data>
      <data key="d3">node_36</data>
      <data key="d4">info_log</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Editor-&gt;Planner: Thought: To create a comprehensive summary of the changes made to resolve the GitHub issue, I need to review the information we have gathered and the modifications we've made to the codebase.</data>
      <data key="d6">445</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_37">
      <data key="d2">Think: I now know the final answer...</data>
      <data key="d3">node_37</data>
      <data key="d4">thought</data>
      <data key="d10">I now know the final answer</data>
      <data key="d5">Thought: I now know the final answer</data>
      <data key="d6">447</data>
      <data key="d7">intern_Codebase Editor</data>
    </node>
    <node id="node_38">
      <data key="d2">Planner</data>
      <data key="d3">node_38</data>
      <data key="d4">planner_response</data>
      <data key="d5">HyperAgent_django__django-13768 - INFO - Planner's Response: Thought: The summary provided covers all the essential aspects of the changes made to resolve the GitHub issue. It accurately describes the problem, the implemented solution, its impact, and important considerations for Django users. This information effectively communicates the resolution of the issue and its implications. Since we have a comprehensive summary that addresses all aspects of the task, we can consider this issue resolved.</data>
      <data key="d6">481</data>
      <data key="d7">planner</data>
    </node>
    <edge source="node_0" target="node_1">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_1" target="node_2">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_2" target="node_3">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_3" target="node_4">
      <data key="d11">delegation</data>
    </edge>
    <edge source="node_4" target="node_5">
      <data key="d11">task_assignment</data>
    </edge>
    <edge source="node_5" target="node_6">
      <data key="d11">execution</data>
    </edge>
    <edge source="node_6" target="node_7">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_7" target="node_8">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_8" target="node_9">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_9" target="node_10">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_10" target="node_11">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_11" target="node_12">
      <data key="d11">reasoning_to_action</data>
    </edge>
    <edge source="node_12" target="node_13">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_13" target="node_14">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_14" target="node_15">
      <data key="d11">delegation</data>
    </edge>
    <edge source="node_15" target="node_16">
      <data key="d11">task_assignment</data>
    </edge>
    <edge source="node_16" target="node_17">
      <data key="d11">execution</data>
    </edge>
    <edge source="node_17" target="node_18">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_18" target="node_19">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_19" target="node_20">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_20" target="node_21">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_21" target="node_22">
      <data key="d11">delegation</data>
    </edge>
    <edge source="node_22" target="node_23">
      <data key="d11">task_assignment</data>
    </edge>
    <edge source="node_23" target="node_24">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_24" target="node_25">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_25" target="node_26">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_26" target="node_27">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_27" target="node_28">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_28" target="node_29">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_29" target="node_30">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_30" target="node_31">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_31" target="node_32">
      <data key="d11">delegation</data>
    </edge>
    <edge source="node_32" target="node_33">
      <data key="d11">task_assignment</data>
    </edge>
    <edge source="node_33" target="node_34">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_34" target="node_35">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_35" target="node_36">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_36" target="node_37">
      <data key="d11">sequential</data>
    </edge>
    <edge source="node_37" target="node_38">
      <data key="d11">sequential</data>
    </edge>
    <data key="d0">django__django-13768</data>
    <data key="d1">["Log exceptions handled in Signal.send_robust()", "Description", "\t", "As pointed out by \u200bHaki Benita on Twitter, by default Signal.send_robust() doesn't have any log messages for exceptions raised in receivers. Since Django logs exceptions in other similar situations, such as missing template variables, I think it would be worth adding a logger.exception() call in the except clause of send_robust() . Users would then see such exceptions in their error handling tools, e.g. Sentry, and be able to figure out what action to take from there. Ultimately any *expected* exception should be caught with a try in the receiver function.", ""]</data>
  </graph>
</graphml>
